// .grid
	// .flex-#
	// .flex-xx-#
	// .flex-xx-auto

// grid
@columns: 12;
@flex-max-width: 100%;

// spacing
@grid-spacing: 1rem;
@grid-padding: 1rem;
@cell-spacing-sm: (@grid-spacing / 2);
@cell-spacing-md: @grid-spacing;
@cell-spacing-lg: (@grid-spacing * 2);

// ------------------
// flex
// ------------------

.flexContainer(@direction: row, @wrap: nowrap) {
	display: flex;
	position: relative;
	flex-direction: @direction;
	flex-wrap: @wrap;
	flex-flow: @direction @wrap;
}

.flex(@grow: 1, @shrink: 1, @basis: auto) {
	flex: @grow @shrink @basis;
}

.flex-row {
	.flexContainer(row, wrap);
}

.flex-row-reverse {
	.flexContainer(row-reverse, wrap);
}

.flex-row-reverse-nowrap {
	.flexContainer(row-reverse, nowrap);
}

.flex-row-nowrap {
	.flexContainer(row, nowrap);
}

.flex-column {
	.flexContainer(column, nowrap);
}

.flex-column-reverse {
	.flexContainer(column-reverse, nowrap);
}

.justifyContentStart() {
	text-align: left;
	justify-content: flex-start;
}

.justifyContentEnd() {
	text-align: right;
	justify-content: flex-end;
}

.justifyContentCenter() {
	text-align: center;
	justify-content: center;
}

.justifyContentSpaceAround() {
	text-align: justify;
	justify-content: space-around;
}

.justifyContentSpaceBetween() {
	text-align: justify;
	justify-content: space-between;
}

// .align-center

// ------------------
// grid generators
// ------------------

.makeGrid(@class: ~'') {
	.loopColumns(@columns, @class, width);
}

.calcColumns(@index, @class, @type) when (@type = width) and (@index > 0) {
	.@{class}@{index} {
		width: percentage((@index / @columns));
		*width: percentage((@index / @columns)) - 0.1;
	}
}

.loopColumns(@index, @class, @type) when (@index >= 0) {
	.calcColumns(@index, @class, @type);
	.loopColumns((@index - 1), @class, @type);
}

// default setup
.setupCols() {
	.flex-column();
	width: 100%;
	vertical-align: top;
	padding: @grid-spacing;
}

// auto cols default
.setupAutoCols() {
	.flex(1,0,0px);
	width: auto!important;
	max-width: 100%;
}

// ------------------
// order generators
// ------------------

.order(@order: 0) {
	order: @order;
}

.makeGridOrderHelpers() {
	.loopGridOrderHelpers(@columns);
}

.loopGridOrderHelpers(@index) when (@index >= 0) {
	.grid-order-@{index} {
		.order(@index);
	}

	// next iteration
	.loopGridOrderHelpers((@index - 1));
}

// ------------------
// grids
// ------------------

.grid {
	display: flex;
	padding: @grid-padding;
	margin: 0;
	position: relative;
	width: 100%;
	max-width: @flex-max-width;

	// for nested grids
	&.grid {
		.flex(1,1,auto);
	}

	// for lists
	list-style-type: none;
}

// ------------------
// column defaults
// ------------------

[class*='col-'] {
	.setupCols();
}

// ------------------
// cell defaults
// ------------------

.grid-cell {
	display: block;
	.flex(1,1,auto);
}

// ------------------
// actually make the grid
// ------------------

.makeGrid(col-);

@media (min-width: @xs) {
	.makeGrid(col-xs-);
}

@media (min-width: @sm) {
	.makeGrid(col-sm-);
}

@media (min-width: @md) {
	.makeGrid(col-md-);
}

@media (min-width: @lg) {
	.makeGrid(col-lg-);
}

@media (min-width: @xl) {
	.makeGrid(col-xl-);
}

// ------------------
// auto column generation
// ------------------

.col-auto {
	.setupAutoCols();
}

@media (min-width: @xs) {
	.col-xs-auto {
		.setupAutoCols();
	}
}

@media (min-width: @sm) {
	.col-sm-auto {
		.setupAutoCols();
	}
}

@media (min-width: @md) {
	.col-md-auto {
		.setupAutoCols();
	}
}

@media (min-width: @lg) {
	.col-lg-auto {
		.setupAutoCols();
	}
}

@media (min-width: @xl) {
	.col-xl-auto {
		.setupAutoCols();
	}
}

// ------------------
// grid sizing [old]
// ------------------


.flex-zero {
	.flex(0,1,auto)!important;
}
.flex {
	.flex(1,1,auto)!important;
}
.flex-2x {
	.flex(2,1,auto)!important;
}
.flex-3x {
	.flex(3,1,auto)!important;
}
.flex-4x {
	.flex(4,1,auto)!important;
}
.flex-5x {
	.flex(5,1,auto)!important;
}
.flex-6x {
	.flex(6,1,auto)!important;
}
.flex-lg {
	.flex(10,1,auto)!important;
}
.flex-fixed {
	.flex(1,1,0)!important;
}
.flex-fixed-2x {
	.flex(2,1,0)!important;
}
.flex-fixed-3x {
	.flex(3,1,0)!important;
}
.flex-fixed-4x {
	.flex(4,1,0)!important;
}
.flex-fixed-5x {
	.flex(5,1,0)!important;
}

.buffer {
	.flex(1,1,auto)!important;
}
.buffer-2x {
	.flex(2,1,auto)!important;
}
.buffer-3x {
	.flex(3,1,auto)!important;
}
.buffer-4x {
	.flex(4,1,auto)!important;
}
.buffer-5x {
	.flex(5,1,auto)!important;
}
.buffer-6x {
	.flex(6,1,auto)!important;
}
.buffer-lg {
	.flex(10,1,auto)!important;   
}
